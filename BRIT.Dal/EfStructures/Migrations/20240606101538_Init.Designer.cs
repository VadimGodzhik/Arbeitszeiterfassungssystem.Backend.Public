// <auto-generated />
using System;
using BRIT.Dal.EfStructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BRIT.Dal.EfStructures.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240606101538_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AngestellteArbeitsorte", b =>
                {
                    b.Property<int>("AngestellteId")
                        .HasColumnType("int");

                    b.Property<int>("ArbeitsortId")
                        .HasColumnType("int");

                    b.HasKey("AngestellteId", "ArbeitsortId");

                    b.HasIndex("ArbeitsortId");

                    b.ToTable("AngestellteArbeitsorte");
                });

            modelBuilder.Entity("AngestellteRollen", b =>
                {
                    b.Property<int>("AngestellteId")
                        .HasColumnType("int");

                    b.Property<int>("RolleId")
                        .HasColumnType("int");

                    b.HasKey("AngestellteId", "RolleId");

                    b.HasIndex("RolleId");

                    b.ToTable("AngestellteRollen");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Angestellte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IstAngestellt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Angestelltes");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Arbeitsandauer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AngestellteId")
                        .HasColumnType("int");

                    b.Property<string>("Arbeitszeit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pausen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Überstunden")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AngestellteId");

                    b.ToTable("Arbeitsandauers");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Arbeitsort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Hausnummer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ort")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postleitzahl")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Straße")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Arbeitsorte", "dbo");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Arbeitszeiterfassung", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AngestellteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumUrzeit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AngestellteId");

                    b.ToTable("Arbeitszeiterfassungen", "dbo");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Fundort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArbeitszeiterfassungId")
                        .HasColumnType("int");

                    b.Property<string>("Hausnummer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ort")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postleitzahl")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Straße")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ArbeitszeiterfassungId" }, "IX_Fundort_ArbeitszeiterfassungId")
                        .IsUnique();

                    b.HasIndex(new[] { "ArbeitszeiterfassungId" }, "IX_Fundorts_ArbeitszeiterfassungId")
                        .IsUnique();

                    b.ToTable("Fundorte");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Hausanschrift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AngestellteId")
                        .HasColumnType("int");

                    b.Property<string>("Hausnummer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StadtId")
                        .HasColumnType("int");

                    b.Property<string>("Straße")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("StadtId");

                    b.HasIndex(new[] { "AngestellteId" }, "IX_Hausanschrift_AngestellteId")
                        .IsUnique();

                    b.HasIndex(new[] { "AngestellteId" }, "IX_Hausanschrifts_AngestellteId")
                        .IsUnique();

                    b.ToTable("Hausanschriften", "dbo");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Kennwort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AngestellteId")
                        .HasColumnType("int");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Zeichenfolge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AngestellteId" }, "IX_Kennwort_AngestellteId")
                        .IsUnique();

                    b.HasIndex(new[] { "AngestellteId" }, "IX_Kennworts_AngestellteId")
                        .IsUnique();

                    b.ToTable("Kennwörter", "dbo");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Rolle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Rollen", "dbo");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Stadt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ort")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postleitzeit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Städte", "dbo");
                });

            modelBuilder.Entity("BRIT.Models.ViewModels.AngestellteArbeitsandauerViewModel", b =>
                {
                    b.Property<int?>("AngestellteId")
                        .HasColumnType("int");

                    b.Property<string>("Arbeitszeit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gesamtandauer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IstAngestellt")
                        .HasColumnType("bit");

                    b.Property<string>("Nachname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pausen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vorname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Überstunden")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("AngestellteArbeitsandauerView", "dbo");
                });

            modelBuilder.Entity("BRIT.Models.ViewModels.AngestellteArbeitsortViewModel", b =>
                {
                    b.Property<int?>("AngestellteId")
                        .HasColumnType("int");

                    b.Property<int?>("ArbeitsortId")
                        .HasColumnType("int");

                    b.Property<bool?>("IstAngestellt")
                        .HasColumnType("bit");

                    b.Property<string>("Nachname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postleitzahl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Straße")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vorname")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("AngestellteArbeitsortView", "dbo");
                });

            modelBuilder.Entity("BRIT.Models.ViewModels.AngestellteArbeitszeiterfassungViewModel", b =>
                {
                    b.Property<int?>("AngestellteId")
                        .HasColumnType("int");

                    b.Property<string>("ArbeitszeiterfassungStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatumUrzeit")
                        .HasColumnType("datetime2");

                    b.Property<string>("FundortStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IstAngestellt")
                        .HasColumnType("bit");

                    b.Property<string>("Nachname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postleitzahl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Straße")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vorname")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("AngestellteArbeitszeiterfassungView", "dbo");
                });

            modelBuilder.Entity("BRIT.Models.ViewModels.AngestellteRolleViewModel", b =>
                {
                    b.Property<int?>("AngestellteId")
                        .HasColumnType("int");

                    b.Property<string>("Bezeichnung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IstAngestellt")
                        .HasColumnType("bit");

                    b.Property<string>("Nachname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RolleId")
                        .HasColumnType("int");

                    b.Property<string>("Vorname")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("AngestellteRolleView", "dbo");
                });

            modelBuilder.Entity("AngestellteArbeitsorte", b =>
                {
                    b.HasOne("BRIT.Models.Entities.Angestellte", null)
                        .WithMany()
                        .HasForeignKey("AngestellteId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_AngestellteArbeitsorte_Angestellte_AngestellteId");

                    b.HasOne("BRIT.Models.Entities.Arbeitsort", null)
                        .WithMany()
                        .HasForeignKey("ArbeitsortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AngestellteArbeitsorte_Arbeitsorte_ArbeitsortId");
                });

            modelBuilder.Entity("AngestellteRollen", b =>
                {
                    b.HasOne("BRIT.Models.Entities.Angestellte", null)
                        .WithMany()
                        .HasForeignKey("AngestellteId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_AngestellteRollen_Angestelltes_AngestellteId");

                    b.HasOne("BRIT.Models.Entities.Rolle", null)
                        .WithMany()
                        .HasForeignKey("RolleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AngestellteRollen_Rolles_RolleId");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Arbeitsandauer", b =>
                {
                    b.HasOne("BRIT.Models.Entities.Angestellte", "AngestellteNavigation")
                        .WithMany("Arbeitsandauers")
                        .HasForeignKey("AngestellteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Angestellte_ArbeitsandauerId");

                    b.Navigation("AngestellteNavigation");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Arbeitszeiterfassung", b =>
                {
                    b.HasOne("BRIT.Models.Entities.Angestellte", "AngestellteNavigation")
                        .WithMany("Arbeitszeiterfassungs")
                        .HasForeignKey("AngestellteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Angestellte_ArbeitszeiterfassungId");

                    b.Navigation("AngestellteNavigation");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Fundort", b =>
                {
                    b.HasOne("BRIT.Models.Entities.Arbeitszeiterfassung", "ArbeitszeiterfassungNavigation")
                        .WithOne("FundortNavigation")
                        .HasForeignKey("BRIT.Models.Entities.Fundort", "ArbeitszeiterfassungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArbeitszeiterfassungNavigation");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Hausanschrift", b =>
                {
                    b.HasOne("BRIT.Models.Entities.Angestellte", "AngestellteNavigation")
                        .WithOne("HausanschriftNavigation")
                        .HasForeignKey("BRIT.Models.Entities.Hausanschrift", "AngestellteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BRIT.Models.Entities.Stadt", "StadtNavigation")
                        .WithMany("Hausanschrifts")
                        .HasForeignKey("StadtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Stadt_HausanschriftId");

                    b.Navigation("AngestellteNavigation");

                    b.Navigation("StadtNavigation");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Kennwort", b =>
                {
                    b.HasOne("BRIT.Models.Entities.Angestellte", "AngestellteNavigation")
                        .WithOne("KennwortNavigation")
                        .HasForeignKey("BRIT.Models.Entities.Kennwort", "AngestellteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AngestellteNavigation");
                });

            modelBuilder.Entity("BRIT.Models.Entities.Angestellte", b =>
                {
                    b.Navigation("Arbeitsandauers");

                    b.Navigation("Arbeitszeiterfassungs");

                    b.Navigation("HausanschriftNavigation")
                        .IsRequired();

                    b.Navigation("KennwortNavigation")
                        .IsRequired();
                });

            modelBuilder.Entity("BRIT.Models.Entities.Arbeitszeiterfassung", b =>
                {
                    b.Navigation("FundortNavigation")
                        .IsRequired();
                });

            modelBuilder.Entity("BRIT.Models.Entities.Stadt", b =>
                {
                    b.Navigation("Hausanschrifts");
                });
#pragma warning restore 612, 618
        }
    }
}
